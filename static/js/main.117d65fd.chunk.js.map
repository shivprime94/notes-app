{"version":3,"sources":["components/Note.js","components/AddNote.js","components/NotesList.js","components/Search.js","components/Header.js","App.js","index.js"],"names":["Note","id","text","date","handleDelete","className","onClick","size","style","color","AddNote","handleAddNote","useState","noteText","setNoteText","cols","rows","placeholder","onChange","event","target","value","length","trim","NotesList","notes","map","note","Search","handleSearch","type","Header","App","nanoid","Date","now","setNotes","searchNote","setSearchNote","darkMode","setDarkMode","useEffect","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","handleToggleDarkMode","filter","toLowerCase","includes","newNote","toLocaleDateString","newNotes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.117d65fd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { MdDeleteForever } from 'react-icons/md'\r\n\r\nfunction Note({ id, text, date, handleDelete }) {\r\n  return (\r\n    <div className='note'>\r\n      {/*This part will contain the main note's text part*/}\r\n      <span>{text}</span>\r\n      {/*in the footer part of the note*/}\r\n\r\n      <div className='note-footer'>\r\n        {/*it will store date on which the user is going to create the note*/}\r\n        <small>{date}</small>\r\n        {/*this is for deleting the note using each note's unique id as parameter\r\n                so we have passed handleDeleteNote function as it's onClick event*/}\r\n        <MdDeleteForever\r\n          onClick={() => handleDelete(id)}\r\n          className='delete-icon'\r\n          size='2em'\r\n          style={{ color: 'red' }}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Note\r\n","import React, { useState } from 'react'\r\n\r\nfunction AddNote({ handleAddNote }) {\r\n  const [noteText, setNoteText] = useState('')\r\n\r\n  const charLimit = 300\r\n\r\n  const handleChange = (event) => {\r\n    if (charLimit - event.target.value.length >= 0) {\r\n      setNoteText(event.target.value)\r\n    }\r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    if (noteText.trim().length > 0) {\r\n      handleAddNote(noteText)\r\n      setNoteText('')\r\n    }\r\n  }\r\n  return (\r\n    <div className='note new'>\r\n      {/*the text area for our input*/}\r\n      <textarea\r\n        cols='10'\r\n        rows='8'\r\n        placeholder='Type to add a new note...'\r\n        onChange={handleChange}\r\n        value={noteText}\r\n      ></textarea>\r\n      <div className='note-footer'>\r\n        <small>{charLimit - noteText.length} Remaining</small>\r\n        <button className='save' onClick={handleSaveClick}>\r\n          Add Note\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddNote\r\n","import React from 'react'\r\nimport Note from './Note'\r\nimport AddNote from './AddNote'\r\n\r\nconst NotesList = ({ notes, handleAddNote, handleDelete }) => {\r\n  return (\r\n    <div className='notes-list'>\r\n      {/*here we are going to use .map to make each note card from notes\r\n        and also passing the functions and other states as propas*/}\r\n      {notes.map((note) => (\r\n        <Note\r\n          id={note.id}\r\n          text={note.text}\r\n          date={note.date}\r\n          handleDelete={handleDelete}\r\n        />\r\n      ))}\r\n      <AddNote handleAddNote={handleAddNote} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotesList\r\n","import React from 'react'\r\nimport { MdSearch } from 'react-icons/md'\r\n\r\nfunction Search({ handleSearch }) {\r\n  return (\r\n    <div className='search'>\r\n      {/*this is our search icon within our search bar and I have fixed it's size to 1.3em*/}\r\n      <MdSearch className='search-icon' size='1.4em' />\r\n      {/*this is the input tag for our search and here , I have used some onClick events for searching*/}\r\n      <input\r\n        type='text'\r\n        placeholder='Search for your notes...'\r\n        onChange={(event) => handleSearch(event.target.value)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className='header'>\r\n      {/*the heading of our notes app*/}\r\n      <h1>\r\n        <span style={{ color: '#308d46' }}>React</span> Notes\r\n      </h1>\r\n      {/*this is our toggle button \r\n        using this button we can change the background theme for our application*/}\r\n      {/* <button onClick={()=>handleToggleDarkMode((previousDarkMode)=>!previousDarkMode)} className=\"save\">Toggle Mode</button> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react'\r\nimport NotesList from './components/NotesList'\r\nimport { nanoid } from 'nanoid'\r\nimport Search from './components/Search'\r\nimport Header from './components/Header'\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = useState([\r\n    {\r\n      id: nanoid(),\r\n      text: 'This is my first note',\r\n      date: Date.now(),\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      text: 'This is my second note',\r\n      date: Date.now(),\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      text: 'This is my third note',\r\n      date: Date.now(),\r\n    },\r\n  ])\r\n\r\n  const [searchNote, setSearchNote] = useState('')\r\n  const [darkMode, setDarkMode] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const savedNotes = JSON.parse(localStorage.getItem('react-notes-app-data'))\r\n    if (savedNotes) {\r\n      setNotes(savedNotes)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('react-notes-app-data', JSON.stringify(notes))\r\n  }, [notes])\r\n\r\n  const addNote = (text) => {\r\n    const date = new Date()\r\n    const newNote = {\r\n      id: nanoid(),\r\n      text: text,\r\n      date: date.toLocaleDateString(),\r\n    }\r\n    const newNotes = [...notes, newNote]\r\n    setNotes(newNotes)\r\n  }\r\n\r\n  const deletingNote = (id) => {\r\n    const newNotes = notes.filter((note) => note.id !== id)\r\n    setNotes(newNotes)\r\n  }\r\n  return (\r\n    <div className={`${darkMode && 'dark-mode'}`}>\r\n      <div className='container'>\r\n        <Header handleToggleDarkMode={setDarkMode} />\r\n\r\n        <Search handleSearch={setSearchNote} />\r\n\r\n        <NotesList\r\n          notes={notes.filter((note) =>\r\n            note.text.toLowerCase().includes(searchNote)\r\n          )}\r\n          handleAddNote={addNote}\r\n          handleDelete={deletingNote}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}